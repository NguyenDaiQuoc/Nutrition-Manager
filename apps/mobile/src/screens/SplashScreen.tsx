import React, { useEffect, useRef, useState } from "react";
import { View, Text, StyleSheet, Image, Animated, Easing } from "react-native";
import * as Progress from "react-native-progress";

export default function SplashScreen({ onFinish }: { onFinish: () => void }) {
    const [progress, setProgress] = useState(0);
    const [message, setMessage] = useState("ƒêang n·∫°p nƒÉng l∆∞·ª£ng cho ·ª©ng d·ª•ng... v√† cho b·∫°n n·ªØa üí™");

    const fadeAnim = useRef(new Animated.Value(1)).current;
    const translateAnim = useRef(new Animated.Value(0)).current;
    const scaleAnim = useRef(new Animated.Value(1)).current;
    const logoOpacity = useRef(new Animated.Value(1)).current;

    useEffect(() => {
        let interval: NodeJS.Timeout;

        // ‚è≥ Ti·∫øn tr√¨nh m∆∞·ª£t
        interval = setInterval(() => {
            setProgress((prev) => {
                const next = prev + 0.02; // tƒÉng ƒë·ªÅu 2% m·ªói l·∫ßn
                if (next >= 1) {
                    clearInterval(interval);
                    animateLogoOut(); // hi·ªáu ·ª©ng k·∫øt th√∫c
                    setTimeout(onFinish, 1300);
                    return 1;
                }
                return next;
            });
        }, 100);

        return () => clearInterval(interval);
    }, []);

    // üîÆ ƒê·ªïi message theo ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
    useEffect(() => {
        if (progress < 0.2)
            updateMessage("ƒêang n·∫°p nƒÉng l∆∞·ª£ng cho ·ª©ng d·ª•ng... v√† cho b·∫°n n·ªØa üí™");
        else if (progress < 0.4)
            updateMessage("ƒêang c√¢n ƒëo ƒëong ƒë·∫øm d·ªØ li·ªáu dinh d∆∞·ª°ng... ‚öñÔ∏è");
        else if (progress < 0.6)
            updateMessage("Thu th·∫≠p th√¥ng tin b·ªØa ƒÉn c·ªßa b·∫°n... ü•¨");
        else if (progress < 0.8)
            updateMessage("Ph√¢n t√≠ch nƒÉng l∆∞·ª£ng v√† d∆∞·ª°ng ch·∫•t... üî¨");
        else if (progress < 1)
            updateMessage("Chu·∫©n b·ªã g·ª£i √Ω th·ª±c ƒë∆°n ph√π h·ª£p üçΩÔ∏è");
        else updateMessage("S·∫µn s√†ng gi√∫p b·∫°n ƒÉn ngon v√† s·ªëng kh·ªèe üåü");
    }, [progress]);

    // üí¨ Hi·ªáu ·ª©ng text tr∆∞·ª£t ƒë·ªïi
    const updateMessage = (text: string) => {
        Animated.parallel([
            Animated.timing(fadeAnim, { toValue: 0, duration: 200, useNativeDriver: true }),
            Animated.timing(translateAnim, { toValue: -10, duration: 200, useNativeDriver: true }),
        ]).start(() => {
            setMessage(text);
            Animated.parallel([
                Animated.timing(fadeAnim, { toValue: 1, duration: 300, useNativeDriver: true }),
                Animated.timing(translateAnim, { toValue: 0, duration: 300, useNativeDriver: true }),
            ]).start();
        });
    };

    // üåü Khi ho√†n t·∫•t: logo s√°ng & ph√≥ng nh·∫π ra
    const animateLogoOut = () => {
        Animated.parallel([
            Animated.timing(scaleAnim, {
                toValue: 1.3,
                duration: 800,
                easing: Easing.out(Easing.exp),
                useNativeDriver: true,
            }),
            Animated.timing(logoOpacity, {
                toValue: 0,
                duration: 1000,
                easing: Easing.inOut(Easing.quad),
                useNativeDriver: true,
            }),
        ]).start();
    };

    return (
        <View style={styles.container}>
            {/* Logo */}
            <Animated.Image
                source={require("../../assets/splash.png")}
                style={[
                    styles.logo,
                    { transform: [{ scale: scaleAnim }], opacity: logoOpacity },
                ]}
                resizeMode="contain"
            />

            {/* Text + progress */}
            <Animated.View
                style={{
                    opacity: fadeAnim,
                    transform: [{ translateY: translateAnim }],
                    alignItems: "center",
                }}
            >
                <Text style={styles.message}>{message}</Text>

                <Progress.Bar
                    progress={progress}
                    width={260}
                    color="#fff"
                    unfilledColor="rgba(255,255,255,0.25)"
                    borderWidth={0}
                    borderRadius={10}
                    height={10}
                    animationType="timing"
                />

                <Text style={styles.percent}>{Math.round(progress * 100)}%</Text>
            </Animated.View>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: "#4FC3F7", // xanh tr·ªùi nƒÉng l∆∞·ª£ng
        alignItems: "center",
        justifyContent: "center",
    },
    logo: {
        width: 160,
        height: 160,
        marginBottom: 60,
    },
    message: {
        fontSize: 16,
        color: "#fff",
        marginBottom: 20,
        textAlign: "center",
        fontWeight: "500",
        paddingHorizontal: 20,
    },
    percent: {
        color: "#fff",
        marginTop: 10,
        fontWeight: "600",
    },
});
